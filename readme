# Justin Ting, 430203826 - Operating Systems Internals Assignment 1
# Monday 10am-12pm lab - Tutor: Jeshua

############################################################################################################################################

MYSHELL

Name
	MYSHELL

############################################################################################################################################

DESCRIPTION
	
	MYSHELL, a very basic shell with minimal functionality designed for the Operating Systems Internals (COMP3520) unit at the 
	University of Sydney.

############################################################################################################################################

SHELL INVOCATION
	
	The shell can be invoked in one of two ways - by either launching the shell itself by running myshell:

		./myshell

	Or for one-time use in running batch files, using:

		./myshell <batch-file>

	Doing the former will allow all commands detailed below to be run within the MYSHELL environment. Note however, that whether batch
	files are run from an external environment using the above latter method or from within the MYSHELL environment, it will quit once
	the batch file execution has ended.

	The shell doesn't have to be invoked from the directory in which the executable exists - it can be run from any directory:

		./<path-other-than-executable-path>/myshell

	IMPORTANT - the help command will not function if MYSHELL is invoked from outside the executable directory, but all other commands
	will function as expected.

############################################################################################################################################

INTERNAL COMMANDS
	
	The following section describes the use of internal commands, the arguments required, default behaviours, and their actual function.


	cd [directory]
		Changes the current default directory to [directory]. 
		If the [directory] argument is not present, the current working directory will be printed. Extra arguments will be ignored.
		If the [directory] argument points to a non-existent directory, an error will be printed and normal operation resumes.
		The PWD environment variable will be changed to match [directory].

	clr
		Clears the terminal screen.
		No arguments needed, extra arguments will be ignored.

	dir [directories]
		Lists the contents of the directory [directory].
		If the [directories] argument is not present, the current directory's contents will be listed.
		If the [directories] argument contains one or more invalid directories, all valid ones will have their contents printed, but 
		also with an error message indicating all the invalid directories.
		[directories] accepts an infinite number of directories and each block will be seprated with a newline.

	environ
		Lists all environment variables
		No arguments needed, extra arguments will be ignored..

	echo [argments]
		Displays [comment[ on the display followed by a new line (where multiple spaces/tabs are reduced to a single space)
		If [arguments] is not provided, simply a new line will be printed.
		Accepts any number of space-separated arguments.

	help
		Display the user manual, using the more filter.
		No arguments needed, extra arguments will be ignored.

	pause
		Pause operation of the Shell until the 'Enter' key is pressed. No input of any sort are permitted and any key input will not be 
		displayed on the screen.
		No arguments needed, extra arguments will be ignored.

	quit
		Quits the shell.
		No arguments needed, extra arguments will be ignored..

############################################################################################################################################

EXTERNAL EXECUTION
	
	NON-INTERNALLY SUPPORTED COMMANDS
		External commands are also available. As the MYSHELL is run from within an existing shell environment (such as bash or zsh),
		all commands that are run from within the MYSHELL that aren't supported internally will attempt to be run externally.

		This is done by spawning a child process, then executing the now-external command in that child-process - if it is a valid external
		command, the external environment will execute it as if it was run within it, then once that command has finished running, the
		child will finish, exit, and return to the parent process - the MYSHELL. If an invaild command attempts to run this way, the
		user will be prompted with an error message.

	BATCH FILES
		syntax: myshell [script file]

		Scripts can be either run from within the shell using the above syntax, at which point the file will be run, then quit the jtin2945
		shell afterwards, or from the external environment:

			syntax: ./myshell [script file]

		Once the script exists the user will be returned to their original external environment.

############################################################################################################################################

ENVIRONMENT CONCEPTS
	
	The shell environment, or in this case, MYSHELL environment, is essentially a bunch of information, but more specifically, a list of
	'environment variables' that is used by both command line commands/utilities as well as programs for configuration purposes. These 
	variables allow the exchange of information between the shell and the programs it executes. MYSHELL is one instance of of a shell - 
	environment variables would allow, for example, for a defaut shell to be set (SHELL=default-shell) so when a terminal is launched the 
	correct one is automatically loaded. 
	
	The information stored are of both a global and local nature - the former being accessible by both a shell and all its children (and their 
	chldren), while the local ones, 'shell variables', are contained within a local shell session.

	Both programs and users can modify the environment - a program, for example, may be spawned in a child process, and want to modify its
	working directory to a user-defined one to be able to read input and print output to a location other than the parent's process'
	directory.

############################################################################################################################################

REDIRECTION
	
	Redirection refers taking the output of a command/script/file/etc. and sending it as input for another command/script/file/etc. There
	are three basic operators for performing redirection that are supported in MYSHELL. The supported redirection revolves around
	modifying standard input (stdin) and standard (output) (standard error (stderr) also exists but it is currently unsupported in jtin2945-
	shell). Stdin and stdout are simply files that are always (by default) open - and redirection allows the files they represent to be 
	modified.
		
		< allows standard input (stdin) redirection, where the output from the right of the ">" is given as input to what is on the left of
		the "<". Take the simple command "echo" for example - if a file "foo.txt" contains the text "bar", then echo < a would print
		"bar" to the terminal.

		> allows standard output (stdout) redirection, where the output from the left of the ">" is redirected as input to what is on the
		right of the ">". For example, echo foo > bar.txt would write the text "foo" to a file called bar.txt. The ">"
		redirection operator truncates files - if the file to the right of the ">" did not exist, one will be created and written to. If
		it already existed, however, the file will be wiped clean before the new contents are written to it. This is called truncating.

		>> also allows standard output (stdout) redirection. However, the difference is that rather than overwrite an existing file, it
		will append to it. That is, it will the contents to the left of the ">>" to the bottom of the file on the right of the ">>". For
		example, if a file "foo.txt" contains the text "bar", then echo fizzbuzz >> foo.txt will modify the contents of foo.txt to be:
			bar
			fizzbuzz


	Only one instance of stdin and stdout redirection respectively are supported per command - and will apply on the argument immediately
	following the redirection symbol.

		For example, in:

			command a < c > d < e >> f

	Only the output from "c" will be redirected as input for "a", and the result redirected to stdout at "d".

############################################################################################################################################

BACKGROUND EXECUTION
	syntax: [args...] &
			[args...] [redirection and further args as appropriate] &
				[args...] < [arg] &
				[args...] >> [arg] &
				[args...] > [arg] & 
				[args...] < [arg] > [arg] &
				[args...] < [arg] >> [arg] &
				etc...

	Background execution is enabled by including the ampersand (&) symbol as the last argument.

	Background execution in the MYSHELL is only supported for externally executed non-internal commmands (and not scripts run using
	the MYSHELL). As explained in the external commands section, under normal operation they are run in spawned child processes. But
	if background execution is used, rather than the parent waiting for its child (external, in this case) process to finish, the job will
	immediately be sent to the background and the user will return to the parent.

	The job will then silently finish in the background, allowing the user to continue normal operations in the MYSHELL as they wish.
	Upon running a command using background execution, the user will be prompted with the current number of child processes, as well as the
	process ID of the process that was sent to the background.
	